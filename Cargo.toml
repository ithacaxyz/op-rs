[workspace.package]
version = "0.0.0"
edition = "2021"
rust-version = "1.81"
authors = []
license = "MIT OR Apache-2.0"
repository = "https://github.com/paradigmxyz/op-rs"
keywords = ["ethereum", "crypto"]
categories = ["cryptography", "cryptography::cryptocurrencies"]

[workspace]
members = [
  "bin/hera",
  "bin/op-rs",
  "crates/net",
  "crates/rollup",
  "crates/ser",
]
default-members = ["bin/hera"]

# Explicitly set the resolver to version 2, which is the default for packages with edition >= 2021
# https://doc.rust-lang.org/edition-guide/rust-2021/default-cargo-resolver.html
resolver = "2"

[profile.release]
strip = "debuginfo"
lto = "thin"
panic = "unwind"
codegen-units = 1
incremental = false

[workspace.dependencies]
# Workspace
op-net = { path = "crates/net" }
rollup = { path = "crates/rollup" }
ser = { path = "crates/ser" }

# Optimism
superchain = { version = "0.5", default-features = false }
kona-providers = "0.0.1"
kona-providers-alloy = { git = "https://github.com/anton-rs/kona", branch = "main", default-features = true }
kona-primitives = { git = "https://github.com/anton-rs/kona", branch = "main", default-features = true }
kona-derive = { git = "https://github.com/anton-rs/kona", branch = "main", default-features = true }

# Alloy
alloy = { version = "0.4.2", features = [
    "contract",
    "providers",
    "provider-http",
    "provider-ws",
    "provider-ipc",
    "signers",
    "consensus",
    "rpc-types",
    "rpc-types-engine",
    "network",
    "ssz"
] }
alloy-primitives = { version = "0.8", features = ["serde"] }
alloy-rlp = "0.3"

# Op-Alloy
# op-alloy-protocol = { version = "0.3", default-features = false }
# op-alloy-rpc-types = { version = "0.3", default-features = false }
# op-alloy-rpc-types-engine = { version = "0.3", default-features = false }
# op-alloy-genesis = { version = "0.3", default-features = false }
op-alloy-protocol = { git = "https://github.com/merklefruit/op-alloy", branch = "nico/feat/net-payload-envelope", default-features = false }
op-alloy-rpc-types = { git = "https://github.com/merklefruit/op-alloy", branch = "nico/feat/net-payload-envelope", default-features = false }
op-alloy-rpc-types-engine = { git = "https://github.com/merklefruit/op-alloy", branch = "nico/feat/net-payload-envelope", default-features = false }
op-alloy-genesis = { git = "https://github.com/merklefruit/op-alloy", branch = "nico/feat/net-payload-envelope", default-features = false }

# Tokio
tokio = { version = "1.21", default-features = false }

# Serialization
serde_json = "1"
ethereum_ssz = "0.7.1"

# Reth
reth = { git = "https://github.com/paradigmxyz/reth", rev = "a846cbd" }
reth-chainspec = { git = "https://github.com/paradigmxyz/reth", rev = "a846cbd" }
reth-discv5 = { git = "https://github.com/paradigmxyz/reth", rev = "a846cbd" }
reth-execution-errors = { git = "https://github.com/paradigmxyz/reth", rev = "a846cbd" }
reth-execution-types = { git = "https://github.com/paradigmxyz/reth", rev = "a846cbd" }
reth-exex = { git = "https://github.com/paradigmxyz/reth", features = ["serde"], rev = "a846cbd" }
reth-network-peers = { git = "https://github.com/paradigmxyz/reth", rev = "a846cbd" }
reth-node-api = { git = "https://github.com/paradigmxyz/reth", rev = "a846cbd" }
reth-node-ethereum = { git = "https://github.com/paradigmxyz/reth", rev = "a846cbd" }
reth-primitives = { git = "https://github.com/paradigmxyz/reth", rev = "a846cbd" }
reth-provider = { git = "https://github.com/paradigmxyz/reth", rev = "a846cbd" }
reth-revm = { git = "https://github.com/paradigmxyz/reth", rev = "a846cbd" }
reth-evm = { git = "https://github.com/paradigmxyz/reth", rev = "a846cbd" }
reth-tracing = { git = "https://github.com/paradigmxyz/reth", rev = "a846cbd" }

# Networking
snap = "1.1.1"
discv5 = "0.6.0"
openssl = { version = "0.10.66", features = ["vendored"] }
libp2p-identity = { version = "0.2.9", features = [ "secp256k1" ] }
libp2p = { version = "0.54.0", features = ["macros", "tokio", "tcp", "noise", "gossipsub", "ping", "yamux"] }

# Testing
arbtest = "0.3"
arbitrary = { version = "1", features = ["derive"] }

# Misc
reqwest = "0.12.7"
tracing = "0.1.0"
tracing-subscriber = "0.3.18"
eyre = "0.6.12"
clap = { version = "4.5.4", features = ["derive", "env"] }
lazy_static = "1.5.0"
futures = "0.3.30"
async-trait = "0.1.81"
hashbrown = "0.14.5"
parking_lot = "0.12.3"
unsigned-varint = "0.8.0"
rand = { version = "0.8.3", features = ["small_rng"], default-features = false }
url = "2.5.2"

[workspace.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[workspace.lints.rustdoc]
all = "warn"

[workspace.lints.rust]
missing_debug_implementations = "warn"
missing_docs = "warn"
rust-2018-idioms = { level = "deny", priority = -1 }
unreachable-pub = "warn"
unused-must-use = "deny"

[workspace.lints.clippy]
# These are some of clippy's nursery (i.e., experimental) lints that we like.
# By default, nursery lints are allowed. Some of the lints below have made good
# suggestions which we fixed. The others didn't have any findings, so we can
# assume they don't have that many false positives. Let's enable them to
# prevent future problems.
branches_sharing_code = "warn"
clear_with_drain = "warn"
derive_partial_eq_without_eq = "warn"
doc_markdown = "warn"
empty_line_after_doc_comments = "warn"
empty_line_after_outer_attr = "warn"
enum_glob_use = "warn"
equatable_if_let = "warn"
explicit_into_iter_loop = "warn"
explicit_iter_loop = "warn"
flat_map_option = "warn"
imprecise_flops = "warn"
iter_on_empty_collections = "warn"
iter_on_single_items = "warn"
iter_with_drain = "warn"
iter_without_into_iter = "warn"
large_stack_frames = "warn"
manual_assert = "warn"
manual_clamp = "warn"
manual_string_new = "warn"
match_same_arms = "warn"
missing_const_for_fn = "warn"
mutex_integer = "warn"
naive_bytecount = "warn"
needless_bitwise_bool = "warn"
needless_continue = "warn"
needless_pass_by_ref_mut = "warn"
nonstandard_macro_braces = "warn"
or_fun_call = "warn"
path_buf_push_overwrite = "warn"
read_zero_byte_vec = "warn"
redundant_clone = "warn"
single_char_pattern = "warn"
string_lit_as_bytes = "warn"
suboptimal_flops = "warn"
suspicious_operation_groupings = "warn"
trailing_empty_array = "warn"
trait_duplication_in_bounds = "warn"
transmute_undefined_repr = "warn"
trivial_regex = "warn"
tuple_array_conversions = "warn"
type_repetition_in_bounds = "warn"
uninhabited_references = "warn"
unnecessary_struct_initialization = "warn"
unused_peekable = "warn"
unused_rounding = "warn"
use_self = "warn"
useless_let_if_seq = "warn"
zero_sized_map_values = "warn"

# These are nursery lints which have findings. Allow them for now. Some are not
# quite mature enough for use in our codebase and some we don't really want.
# Explicitly listing should make it easier to fix in the future.
as_ptr_cast_mut = "allow"
cognitive_complexity = "allow"
collection_is_never_read = "allow"
debug_assert_with_mut_call = "allow"
fallible_impl_from = "allow"
future_not_send = "allow"
needless_collect = "allow"
non_send_fields_in_send_ty = "allow"
redundant_pub_crate = "allow"
significant_drop_in_scrutinee = "allow"
significant_drop_tightening = "allow"
